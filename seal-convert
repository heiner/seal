#!/usr/bin/env ruby
# -*- ruby -*-

$: << File.dirname(__FILE__)

require 'yaml'
require 'fileutils'
require 'src/albumconverter'

class Seal

  include FileUtils

  RESIDENCE = File::dirname(__FILE__)

  class Stats
    attr_accessor :songs, :albums
    def initialize
      @songs = @albums = 0
      @start = Time.now
    end

    def print
      puts "Songs:  #@songs"
      puts "Albums: #@albums"
      puts "Elapsed: " + sprintf( "%0.3fs", Time.now - @start )
    end
  end

  attr_reader   :options, :stats, :out, :err, :albumtitles
  attr_accessor :current_input_path, :current_input

  def initialize( options )
    @options = options
    @data   = YAML.load_file( File::join( RESIDENCE, 'data', 'songs.yaml' ) )
    @albums = YAML.load_file( File::join( RESIDENCE, 'data', 'albums.yaml' ) )
    @albumtitles =
         YAML.load_file( File::join( RESIDENCE, 'data', 'albumtitles.yaml' ) )
    @stats = Stats.new
    @albumconverter = AlbumConverter.new( self )

    @out = $stdout
    @err = $stderr
  end

  def convert
    setup

    contents = []
    open( File.join( @options[ :destination ], 'index.tex' ), 'w' ) do |index|
      @albums.each do |album|
        if album.nil?
          contents << [ nil, nil ]
          next
        end

        songs = @data[ album ]
        next if songs.empty?

        dir, ext = album.split( "#" )
        ext = '_' + ext if not ext.nil?

        source = File::join( @options[ :source ], dir )
        destination = File::join( @options[ :destination ], dir )

        begin
          @albumconverter.convert( album, source, destination, songs )
        rescue Errno::ENOENT => e
          @err << e.to_s << "\n" << "Please check your data/songs.yaml and data/albums.yaml files\n"
          exit( 3 )
        end
        index << "\\input{" << File::join( dir, "index#{ext}.tex" ) << "}\n"
        contents << [ @albumconverter.number, @albumconverter.title ]
      end
    end

    generate_toc( contents )

    unless @options[ :quiet ]
      @out << "\n\n" << <<EOS
Congratulations -- conversion is done! Run seal-tex now.
(Now you can seal up the book and not write anymore.)

EOS
      @stats.print
    end
  end

  private

  def generate_toc( contents )
    toc = File::join( @options[:destination], 'contents.tex' )
    open( toc, "w" ) do |toc|
      toc << <<EOS
\\thispagestyle{empty}
\\vspace*\\fill
\\pdfbookmark{Contents}{toc}
\\begin{center}\\begin{tabular}{rlcrl}
\\multicolumn{5}{r}{{\\Huge Contents}}\\tabularnewline
&&&&\\tabularnewline
&&&&\\tabularnewline
Preface & \\emph{\\pageref{preface}}&&&\\tabularnewline
Roadmaps for the Soul & \\emph{\\pageref{roadmaps}}&&&\\tabularnewline
Harp Keys & \\emph{\\pageref{harpkeys}}&&&\\tabularnewline
&&&&\\tabularnewline
EOS

      half = contents.size.quo(2).ceil
      0.upto( half-1 ) do |i|
        number, title = contents[i]
        if number =~ /[A-Z]/
          # faked small caps in the ToC
          printnumber = "\\small{#{number}}"
        else
          printnumber = number
        end
        toc << <<EOS
\\textbf{#{printnumber}}$\\quad$#{title} & \\emph{\\pageref{album:#{number}}} & &
EOS

        if i + half < contents.size
          number, title = contents[i+half]
          if number.nil? || title.nil?
            # spacing between albums and misc. sections
            toc << "&"
          else
            if number =~ /[A-Z]/
              # faked small caps in the ToC
              printnumber = "\\small{#{number}}"
            else
              printnumber = number
            end
            toc << <<EOS
\\textbf{#{printnumber}}$\\quad$#{title} & \\emph{\\pageref{album:#{number}}}
EOS
          end
        else
          toc << "&"
        end
        toc << "\\tabularnewline\n"
      end
      toc << <<EOS
&&&&\\tabularnewline
\\multicolumn{4}{r}{Song Index} & \\emph{\\pageref{songindex}}\\tabularnewline
\\end{tabular}\\end{center}
\\vfill
EOS
    end
  end

  def setup
    dest = @options[ :destination ]

    if File::exist?( dest )
      if @options[ :force ] or ask( "Directory `#{dest}' exists. Overwrite?" ) #"
        rm_rf( Dir::glob( File::join( dest, "*[^~]" ) ) )
      else
        @err << "Abort.\n"
        exit( 2 )
      end
    else
      mkdir( dest )
    end

    copy_dir( File::join( RESIDENCE, "template" ), dest )

    @data.each_key do |album|
      if album.include?( ?# )
        dir, ext = album.split( '#' )
        dir = File::join( dest, dir )
        if not File::exist?( dir )
          mkdir( dir )
        end
      else
        mkdir( File::join( dest, album ) )
      end
    end

    about = File::join( dest, 'about.tex' )
    open( about, "w" ) do |about|
      about << <<EOS
\\thispagestyle{empty}
\\vspace*\\fill
\\begin{flushleft}
{\\small Created by \\texttt{seal} (commit #{Seal::COMMIT}).\\\\
Typeset using \\LaTeX\\ on \\today.}
\\end{flushleft}
EOS
    end

    if @options[ :config ].nil? or @options[ :config ].empty?
      @options[ :config ] = "\\openany"
    end

    return unless @options[ :config ].respond_to?( :each )

    open( File.join( dest, 'config.tex' ), "w" ) do |config|
      @options[ :config ].each do |option|
        config << option << "\n"
      end
    end
  end

  def copy_dir( src, dest )
    # copies the *non-hidden contents* of src
    # into dest
    Dir::glob( File::join( src, "*[^~]" ) ).each do |src_entry|
      dest_entry = File::join( dest, File::basename( src_entry ) )

      if File::directory?( src_entry )
        mkdir dest_entry
        copy_dir( src_entry, dest_entry )
      else
        copy( src_entry, dest_entry )
      end
    end
  end

  public

  def ask( promt, default = 'n' )
    opts = { 'y'=>' [Y/n] ', 'n'=>' [y/N] ' }
    print promt, opts[ default.downcase ]
    char = $stdin.getc
    if char != ?\n
      # read the following newline character,
      # if we havn't already got one
      $stdin.getc
    end
    'y' == char.chr.downcase.sub( "\n", default )
  end

  def exit( state=0 )
    Kernel::exit( state )
  end

  def progress( char )
    unless @options[ :quiet ]
      @out.print( char )
      @out.flush
    end
  end

end

if __FILE__ == $0
  require 'optparse'
  require 'src/about'

  options = { :config => '\\openany' }
  opts = OptionParser.new do |opts|
    opts.banner = <<EOS
seal (commit #{Seal::COMMIT}) from #{Seal::DATE}
Usage: seal-convert [options] source [destination]

seal-convert is a command line tool to convert
the Dylanchords HTML files to LaTeX

Options:
EOS

    opts.version = "from commit #{Seal::COMMIT}"

    opts.on( "-f", "--[no-]force", "Overwrite existing directories" ) do |f|
      options[ :force ] = f
    end
    opts.on( "-q", "--[no-]quiet", "Don't write what is going on" ) do |q|
      options[ :quiet ] = q
    end
    opts.on( "-o", "--options [list]", String,
             "Set a configuration option" ) do |list|
      options[ :config ] = []
      list.scan( /\w+/ ) do |option|
        case option
        when 'openright', 'openleft', 'openany'
          options[ :config ] << "\\" + option
        else
          $stderr.puts "Unknown configuration option: `#{option}'"
          exit( 4 )
        end
      end
    end

    opts.on_tail # separator
    opts.on_tail( "-h", "--help", "Show this message" ) do
      puts opts
      exit
    end
    opts.on_tail( "--copyright", "Show copyright (revised BSD License)" ) do
      puts Seal::LICENSE
      exit
    end
  end

  begin
    opts.parse!( ARGV )
  rescue OptionParser::ParseError => error
    puts error
    exit( 1 )
  end

  if ARGV.empty?
    puts opts
    exit( 1 )
  end

  options[ :source ] = ARGV.shift
  options[ :destination ] = ARGV.shift||File::join( Dir::pwd, 'book' )

  seal = Seal.new( options )

  begin
    seal.convert
  rescue Interrupt
    exit 2
  end
end
