#!/usr/bin/env ruby
# -*- ruby -*-

$: << File.dirname(__FILE__)

class Seal

  def initialize( options )
    @options = options
  end

  def tex
    Dir::chdir( @options[ :directory ] )

    tex_cmd = "pdflatex mbpbook"
    makeindex_cmd = "makeindex mbpbook"

    run_command( tex_cmd )
    if File::stat( "mbpbook.idx" ).zero?
      # Only one LaTeX run isn't enough
      # for older versions of the memoir
      # class. What a pity.
      $stderr << "Two LaTeX runs needed\n"
      run_command( tex_cmd )
    end
    run_command( makeindex_cmd )
    run_command( tex_cmd )
  end

  def run_command( command )
    if @options[ :quiet ]
      `#{command}`
    else
      system( command )
    end
    if not ($? && $?.success?)
      $stderr << "Error: command `#{command}' failed\n"
      exit( 1 )
    end
  end
  
end

if __FILE__ == $0
  require 'optparse'
  require 'src/about'
  
  options = Hash.new
  opts = OptionParser.new do |opts|
    opts.banner = <<EOS
seal (commit #{Seal::COMMIT}) from #{Seal::DATE}
Usage: seal-tex [options] [directory]

seal-tex is a simple command line tool to TeX
the Dylanchords LaTeX files that seal-convert
has created.

Options:
EOS

    opts.version = "from commit #{Seal::COMMIT}"

    opts.on( "-v", "--[no-]verbose", "Write out what is going on" ) do |v|
      options[ :quiet ] = !v
    end
    opts.on( "-q", "--[no-]quiet", "Don't write what is going on" ) do |q|
      options[ :quiet ] = q
    end

    #opts.on( "--pdf" ) do
    #  exit
    #end
    #opts.on( "--postscript" ) do
    #  exit
    #end

    opts.on_tail # separator
    opts.on_tail( "-h", "--help", "Show this message" ) do
      puts opts
      exit
    end
    opts.on_tail( "--copyright", "Show copyright (revised BSD License)" ) do
      puts Seal::LICENSE
      exit
    end
  end

  begin
    opts.parse!( ARGV )
  rescue OptionParser::InvalidOption => error
    if error.args.include?( '--pdf' )
      puts "The --pdf option is now obsolete"
    elsif error.args.include?( '--postscript' )
      puts "The --postscript option is no longer supported"
      exit( 2 )
    else
      puts error
      exit( 1 )
    end
  rescue OptionParser::ParseError => error
    puts error
    exit( 1 )
  end

  options[ :directory ] = ARGV.shift||'book'
  if not File::exist?( options[ :directory ] )
    $stderr << "Error: Directory `#{options[ :directory ]}' not found. " \
         "Did you run seal-convert?\n"
    exit( 2 )
  end

  seal = Seal.new( options )

  begin
    seal.tex
  rescue Interrupt
  end
end
